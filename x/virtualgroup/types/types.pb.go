// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/virtualgroup/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A global virtual group consists of one primary SP (SP) and multiple secondary SP.
// Every global virtual group must belong to a GVG family, and the objects of each
// bucket must be stored in a GVG within a group family.
type GlobalVirtualGroup struct {
	Id                    uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FamilyId              uint32   `protobuf:"varint,2,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	PrimarySpId           uint32   `protobuf:"varint,3,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	SecondarySpId         []uint32 `protobuf:"varint,4,rep,packed,name=secondary_sp_id,json=secondarySpId,proto3" json:"secondary_sp_id,omitempty"`
	StoredSize            uint64   `protobuf:"varint,5,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
	VirtualPaymentAddress string   `protobuf:"bytes,6,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
}

func (m *GlobalVirtualGroup) Reset()         { *m = GlobalVirtualGroup{} }
func (m *GlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*GlobalVirtualGroup) ProtoMessage()    {}
func (*GlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fe6fc664532d0c3, []int{0}
}
func (m *GlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalVirtualGroup.Merge(m, src)
}
func (m *GlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *GlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalVirtualGroup proto.InternalMessageInfo

func (m *GlobalVirtualGroup) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GlobalVirtualGroup) GetFamilyId() uint32 {
	if m != nil {
		return m.FamilyId
	}
	return 0
}

func (m *GlobalVirtualGroup) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *GlobalVirtualGroup) GetSecondarySpId() []uint32 {
	if m != nil {
		return m.SecondarySpId
	}
	return nil
}

func (m *GlobalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

func (m *GlobalVirtualGroup) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

// Local virtual group(LVG) uniquely associated with a global virtual group.
// Each bucket maintains a mapping from local virtual group to global virtual group
// Each local virtual group is associated with a unique virtual payment account,
// where all object fees are streamed to.
type LocalVirtualGroup struct {
	Id                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GlobalVirtualGroupId  uint32 `protobuf:"varint,2,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	StoredSize            uint64 `protobuf:"varint,3,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
	VirtualPaymentAddress string `protobuf:"bytes,4,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
}

func (m *LocalVirtualGroup) Reset()         { *m = LocalVirtualGroup{} }
func (m *LocalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*LocalVirtualGroup) ProtoMessage()    {}
func (*LocalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fe6fc664532d0c3, []int{1}
}
func (m *LocalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalVirtualGroup.Merge(m, src)
}
func (m *LocalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *LocalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_LocalVirtualGroup proto.InternalMessageInfo

func (m *LocalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LocalVirtualGroup) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *LocalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

func (m *LocalVirtualGroup) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

// Global virtual group family serve as a means of grouping global virtual groups.
// Each bucket must be associated with a unique global virtual group family and cannot cross families.
type GlobalVirtualGroupFamily struct {
	Id                    uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GlobalVirtualGroupIds []uint64 `protobuf:"varint,2,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
	VirtualPaymentAddress string   `protobuf:"bytes,3,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
}

func (m *GlobalVirtualGroupFamily) Reset()         { *m = GlobalVirtualGroupFamily{} }
func (m *GlobalVirtualGroupFamily) String() string { return proto.CompactTextString(m) }
func (*GlobalVirtualGroupFamily) ProtoMessage()    {}
func (*GlobalVirtualGroupFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fe6fc664532d0c3, []int{2}
}
func (m *GlobalVirtualGroupFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalVirtualGroupFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalVirtualGroupFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalVirtualGroupFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalVirtualGroupFamily.Merge(m, src)
}
func (m *GlobalVirtualGroupFamily) XXX_Size() int {
	return m.Size()
}
func (m *GlobalVirtualGroupFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalVirtualGroupFamily.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalVirtualGroupFamily proto.InternalMessageInfo

func (m *GlobalVirtualGroupFamily) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GlobalVirtualGroupFamily) GetGlobalVirtualGroupIds() []uint64 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

func (m *GlobalVirtualGroupFamily) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*GlobalVirtualGroup)(nil), "greenfield.virtualgroup.GlobalVirtualGroup")
	proto.RegisterType((*LocalVirtualGroup)(nil), "greenfield.virtualgroup.LocalVirtualGroup")
	proto.RegisterType((*GlobalVirtualGroupFamily)(nil), "greenfield.virtualgroup.GlobalVirtualGroupFamily")
}

func init() {
	proto.RegisterFile("greenfield/virtualgroup/types.proto", fileDescriptor_1fe6fc664532d0c3)
}

var fileDescriptor_1fe6fc664532d0c3 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x86, 0x3b, 0x49, 0xbc, 0x78, 0xe7, 0x12, 0xc5, 0xd0, 0x4b, 0xc7, 0x0a, 0x31, 0x54, 0x90,
	0x6c, 0xda, 0x2c, 0x54, 0x5c, 0xdb, 0x85, 0xa5, 0x20, 0x52, 0x52, 0x70, 0xe1, 0x26, 0x24, 0x99,
	0xe9, 0x74, 0x20, 0xc9, 0x84, 0x99, 0x54, 0x4c, 0x57, 0x3e, 0x82, 0x0f, 0xa3, 0xef, 0xe0, 0x46,
	0x28, 0xae, 0x5c, 0x4a, 0xfb, 0x22, 0xd2, 0x99, 0x68, 0x0b, 0x69, 0x05, 0xbb, 0x4b, 0xfe, 0xf9,
	0xcf, 0xe4, 0x7c, 0xff, 0xc9, 0x81, 0x4f, 0xa8, 0x20, 0xa4, 0x58, 0x30, 0x92, 0xe1, 0xe0, 0x03,
	0x13, 0xd5, 0x2a, 0xce, 0xa8, 0xe0, 0xab, 0x32, 0xa8, 0xea, 0x92, 0xc8, 0x51, 0x29, 0x78, 0xc5,
	0x9d, 0xde, 0xc1, 0x34, 0x3a, 0x36, 0xf5, 0x1f, 0xa6, 0x5c, 0xe6, 0x5c, 0x46, 0xca, 0x16, 0xe8,
	0x17, 0x5d, 0xd3, 0xef, 0x52, 0x4e, 0xb9, 0xd6, 0xf7, 0x4f, 0x5a, 0x1d, 0x7c, 0x32, 0xa0, 0x33,
	0xc9, 0x78, 0x12, 0x67, 0xef, 0xf4, 0x3d, 0x93, 0xfd, 0x3d, 0xce, 0x3d, 0x68, 0x30, 0x8c, 0x80,
	0x07, 0x7c, 0x2b, 0x34, 0x18, 0x76, 0x1e, 0xc1, 0xeb, 0x45, 0x9c, 0xb3, 0xac, 0x8e, 0x18, 0x46,
	0x86, 0x07, 0x7c, 0x3b, 0xbc, 0xab, 0x85, 0x29, 0x76, 0x06, 0xd0, 0x2e, 0x05, 0xcb, 0x63, 0x51,
	0x47, 0xb2, 0xdc, 0x1b, 0x4c, 0x65, 0xb8, 0x69, 0xc4, 0x79, 0x39, 0xc5, 0xce, 0x53, 0x78, 0x5f,
	0x92, 0x94, 0x17, 0xf8, 0xe0, 0xb2, 0x3c, 0xd3, 0xb7, 0x43, 0xfb, 0xaf, 0xac, 0x7c, 0x8f, 0xe1,
	0x8d, 0xac, 0xb8, 0x20, 0x38, 0x92, 0x6c, 0x4d, 0xd0, 0x1d, 0xd5, 0x01, 0xd4, 0xd2, 0x9c, 0xad,
	0x89, 0x33, 0x83, 0xbd, 0x86, 0x38, 0x2a, 0xe3, 0x3a, 0x27, 0x45, 0x15, 0xc5, 0x18, 0x0b, 0x22,
	0x25, 0xba, 0xf2, 0x80, 0x7f, 0x3d, 0x46, 0x3f, 0xbe, 0x0c, 0xbb, 0x0d, 0xf9, 0x2b, 0x7d, 0x32,
	0xaf, 0x04, 0x2b, 0x68, 0x78, 0xdb, 0x14, 0xce, 0x74, 0x5d, 0x73, 0x38, 0xf8, 0x0e, 0xe0, 0x83,
	0x37, 0x3c, 0x3d, 0x9b, 0x80, 0xad, 0x12, 0x78, 0x01, 0x7b, 0x54, 0xe5, 0x14, 0xfd, 0xf9, 0xbc,
	0x4a, 0xfc, 0x90, 0x47, 0x97, 0xb6, 0x62, 0x6c, 0xf3, 0x98, 0xff, 0xc3, 0x63, 0x5d, 0xc6, 0xf3,
	0x15, 0x40, 0xd4, 0x1e, 0xe9, 0x6b, 0x35, 0xad, 0x16, 0xd6, 0x4b, 0x88, 0xce, 0x60, 0x49, 0x64,
	0x78, 0xa6, 0x6f, 0x85, 0xb7, 0xa7, 0xb8, 0xe4, 0xbf, 0xfa, 0x36, 0x2f, 0xea, 0x7b, 0xfc, 0xf6,
	0xdb, 0xd6, 0x05, 0x9b, 0xad, 0x0b, 0x7e, 0x6d, 0x5d, 0xf0, 0x79, 0xe7, 0x76, 0x36, 0x3b, 0xb7,
	0xf3, 0x73, 0xe7, 0x76, 0xde, 0x3f, 0xa7, 0xac, 0x5a, 0xae, 0x92, 0x51, 0xca, 0xf3, 0x20, 0x29,
	0x92, 0x61, 0xba, 0x8c, 0x59, 0x11, 0x1c, 0x2d, 0xca, 0xc7, 0x13, 0xab, 0x92, 0x5c, 0xa9, 0x3f,
	0xfc, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x4e, 0x59, 0xf3, 0x52, 0x03, 0x00, 0x00,
}

func (m *GlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.StoredSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SecondarySpId) > 0 {
		dAtA2 := make([]byte, len(m.SecondarySpId)*10)
		var j1 int
		for _, num := range m.SecondarySpId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x18
	}
	if m.FamilyId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.StoredSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x18
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalVirtualGroupFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalVirtualGroupFamily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalVirtualGroupFamily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA4 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j3 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.FamilyId != 0 {
		n += 1 + sovTypes(uint64(m.FamilyId))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovTypes(uint64(m.PrimarySpId))
	}
	if len(m.SecondarySpId) > 0 {
		l = 0
		for _, e := range m.SecondarySpId {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.StoredSize != 0 {
		n += 1 + sovTypes(uint64(m.StoredSize))
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LocalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovTypes(uint64(m.GlobalVirtualGroupId))
	}
	if m.StoredSize != 0 {
		n += 1 + sovTypes(uint64(m.StoredSize))
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalVirtualGroupFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyId", wireType)
			}
			m.FamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SecondarySpId = append(m.SecondarySpId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SecondarySpId) == 0 {
					m.SecondarySpId = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SecondarySpId = append(m.SecondarySpId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySpId", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalVirtualGroupFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalVirtualGroupFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalVirtualGroupFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
