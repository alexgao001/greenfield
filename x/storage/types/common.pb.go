// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/storage/common.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SourceType represents the source of resource creation, which can
// from Greenfield native or from a cross-chain transfer from BSC
type SourceType int32

const (
	SOURCE_TYPE_ORIGIN          SourceType = 0
	SOURCE_TYPE_BSC_CROSS_CHAIN SourceType = 1
	SOURCE_TYPE_MIRROR_PENDING  SourceType = 2
)

var SourceType_name = map[int32]string{
	0: "SOURCE_TYPE_ORIGIN",
	1: "SOURCE_TYPE_BSC_CROSS_CHAIN",
	2: "SOURCE_TYPE_MIRROR_PENDING",
}

var SourceType_value = map[string]int32{
	"SOURCE_TYPE_ORIGIN":          0,
	"SOURCE_TYPE_BSC_CROSS_CHAIN": 1,
	"SOURCE_TYPE_MIRROR_PENDING":  2,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}

func (SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4eff6c0fa4aaf4c9, []int{0}
}

// BucketStatus represents the status of a bucket. After a user successfully
// sends a CreateBucket transaction onto the chain, the status is set to 'Created'.
// When a Discontinue Object transaction is received on chain, the status is set to 'Discontinued'.
type BucketStatus int32

const (
	BUCKET_STATUS_CREATED      BucketStatus = 0
	BUCKET_STATUS_DISCONTINUED BucketStatus = 1
)

var BucketStatus_name = map[int32]string{
	0: "BUCKET_STATUS_CREATED",
	1: "BUCKET_STATUS_DISCONTINUED",
}

var BucketStatus_value = map[string]int32{
	"BUCKET_STATUS_CREATED":      0,
	"BUCKET_STATUS_DISCONTINUED": 1,
}

func (x BucketStatus) String() string {
	return proto.EnumName(BucketStatus_name, int32(x))
}

func (BucketStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4eff6c0fa4aaf4c9, []int{1}
}

// RedundancyType represents the redundancy algorithm type for object data,
// which can be either multi-replica or erasure coding.
type RedundancyType int32

const (
	REDUNDANCY_EC_TYPE      RedundancyType = 0
	REDUNDANCY_REPLICA_TYPE RedundancyType = 1
)

var RedundancyType_name = map[int32]string{
	0: "REDUNDANCY_EC_TYPE",
	1: "REDUNDANCY_REPLICA_TYPE",
}

var RedundancyType_value = map[string]int32{
	"REDUNDANCY_EC_TYPE":      0,
	"REDUNDANCY_REPLICA_TYPE": 1,
}

func (x RedundancyType) String() string {
	return proto.EnumName(RedundancyType_name, int32(x))
}

func (RedundancyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4eff6c0fa4aaf4c9, []int{2}
}

// ObjectStatus represents the creation status of an object. After a user successfully
// sends a CreateObject transaction onto the chain, the status is set to 'Created'.
// After the Primary Service Provider successfully sends a Seal Object transaction onto
// the chain, the status is set to 'Sealed'. When a Discontinue Object transaction is
// received on chain, the status is set to 'Discontinued'.
type ObjectStatus int32

const (
	OBJECT_STATUS_CREATED      ObjectStatus = 0
	OBJECT_STATUS_SEALED       ObjectStatus = 1
	OBJECT_STATUS_DISCONTINUED ObjectStatus = 2
)

var ObjectStatus_name = map[int32]string{
	0: "OBJECT_STATUS_CREATED",
	1: "OBJECT_STATUS_SEALED",
	2: "OBJECT_STATUS_DISCONTINUED",
}

var ObjectStatus_value = map[string]int32{
	"OBJECT_STATUS_CREATED":      0,
	"OBJECT_STATUS_SEALED":       1,
	"OBJECT_STATUS_DISCONTINUED": 2,
}

func (x ObjectStatus) String() string {
	return proto.EnumName(ObjectStatus_name, int32(x))
}

func (ObjectStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4eff6c0fa4aaf4c9, []int{3}
}

// VisibilityType is the resources public status.
type VisibilityType int32

const (
	VISIBILITY_TYPE_UNSPECIFIED VisibilityType = 0
	VISIBILITY_TYPE_PUBLIC_READ VisibilityType = 1
	VISIBILITY_TYPE_PRIVATE     VisibilityType = 2
	// If the bucket Visibility is inherit, it's finally set to private. If the object Visibility is inherit, it's the same as bucket.
	VISIBILITY_TYPE_INHERIT VisibilityType = 3
)

var VisibilityType_name = map[int32]string{
	0: "VISIBILITY_TYPE_UNSPECIFIED",
	1: "VISIBILITY_TYPE_PUBLIC_READ",
	2: "VISIBILITY_TYPE_PRIVATE",
	3: "VISIBILITY_TYPE_INHERIT",
}

var VisibilityType_value = map[string]int32{
	"VISIBILITY_TYPE_UNSPECIFIED": 0,
	"VISIBILITY_TYPE_PUBLIC_READ": 1,
	"VISIBILITY_TYPE_PRIVATE":     2,
	"VISIBILITY_TYPE_INHERIT":     3,
}

func (x VisibilityType) String() string {
	return proto.EnumName(VisibilityType_name, int32(x))
}

func (VisibilityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4eff6c0fa4aaf4c9, []int{4}
}

// SecondarySpSignDoc used to generate seal signature of secondary SP
// If the secondary SP only signs the checksum to declare the object pieces are saved,
// it might be reused by the primary SP to fake it's declaration.
// Then the primary SP can challenge and slash the secondary SP.
// So the id of the object is needed to prevent this.
type SecondarySpSignDoc struct {
	GlobalGroupId uint32   `protobuf:"varint,1,opt,name=global_group_id,json=globalGroupId,proto3" json:"global_group_id,omitempty"`
	ObjectId      Uint     `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3,customtype=Uint" json:"object_id"`
	Checksums     [][]byte `protobuf:"bytes,3,rep,name=checksums,proto3" json:"checksums,omitempty"`
}

func (m *SecondarySpSignDoc) Reset()         { *m = SecondarySpSignDoc{} }
func (m *SecondarySpSignDoc) String() string { return proto.CompactTextString(m) }
func (*SecondarySpSignDoc) ProtoMessage()    {}
func (*SecondarySpSignDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eff6c0fa4aaf4c9, []int{0}
}
func (m *SecondarySpSignDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecondarySpSignDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecondarySpSignDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecondarySpSignDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondarySpSignDoc.Merge(m, src)
}
func (m *SecondarySpSignDoc) XXX_Size() int {
	return m.Size()
}
func (m *SecondarySpSignDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondarySpSignDoc.DiscardUnknown(m)
}

var xxx_messageInfo_SecondarySpSignDoc proto.InternalMessageInfo

func (m *SecondarySpSignDoc) GetGlobalGroupId() uint32 {
	if m != nil {
		return m.GlobalGroupId
	}
	return 0
}

func (m *SecondarySpSignDoc) GetChecksums() [][]byte {
	if m != nil {
		return m.Checksums
	}
	return nil
}

func init() {
	proto.RegisterEnum("greenfield.storage.SourceType", SourceType_name, SourceType_value)
	proto.RegisterEnum("greenfield.storage.BucketStatus", BucketStatus_name, BucketStatus_value)
	proto.RegisterEnum("greenfield.storage.RedundancyType", RedundancyType_name, RedundancyType_value)
	proto.RegisterEnum("greenfield.storage.ObjectStatus", ObjectStatus_name, ObjectStatus_value)
	proto.RegisterEnum("greenfield.storage.VisibilityType", VisibilityType_name, VisibilityType_value)
	proto.RegisterType((*SecondarySpSignDoc)(nil), "greenfield.storage.SecondarySpSignDoc")
}

func init() { proto.RegisterFile("greenfield/storage/common.proto", fileDescriptor_4eff6c0fa4aaf4c9) }

var fileDescriptor_4eff6c0fa4aaf4c9 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x4f, 0x4f, 0xd4, 0x4c,
	0x1c, 0xc7, 0x5b, 0x20, 0x4f, 0x1e, 0x46, 0xc0, 0x66, 0x82, 0x02, 0xbb, 0xa6, 0x4b, 0x3c, 0x18,
	0x42, 0x02, 0x3d, 0x78, 0xf1, 0xda, 0x4e, 0x47, 0x18, 0x59, 0xdb, 0xcd, 0x4c, 0x4b, 0x82, 0x97,
	0x49, 0x3b, 0x1d, 0x4b, 0x65, 0xb7, 0xb3, 0xe9, 0x9f, 0xc4, 0x7d, 0x07, 0x1e, 0x8d, 0xf1, 0x1d,
	0xf8, 0x16, 0x7c, 0x11, 0x1c, 0x89, 0x27, 0xe3, 0x81, 0x18, 0x78, 0x23, 0xa6, 0x5b, 0x90, 0xdd,
	0xb8, 0xb7, 0x9d, 0xef, 0xf7, 0x93, 0xdf, 0x7c, 0xf6, 0x97, 0x0e, 0xe8, 0xa5, 0x85, 0x94, 0xf9,
	0xfb, 0x4c, 0x0e, 0x13, 0xab, 0xac, 0x54, 0x11, 0xa5, 0xd2, 0x12, 0x6a, 0x34, 0x52, 0xf9, 0xe1,
	0xb8, 0x50, 0x95, 0x82, 0xf0, 0x01, 0x38, 0xbc, 0x03, 0x3a, 0x3b, 0x42, 0x95, 0x23, 0x55, 0xf2,
	0x29, 0x61, 0xb5, 0x87, 0x16, 0xef, 0x6c, 0xa6, 0x2a, 0x55, 0x6d, 0xde, 0xfc, 0x6a, 0xd3, 0xe7,
	0x5f, 0x75, 0x00, 0x99, 0x14, 0x2a, 0x4f, 0xa2, 0x62, 0xc2, 0xc6, 0x2c, 0x4b, 0x73, 0x57, 0x09,
	0xf8, 0x02, 0x3c, 0x4e, 0x87, 0x2a, 0x8e, 0x86, 0x3c, 0x2d, 0x54, 0x3d, 0xe6, 0x59, 0xb2, 0xad,
	0xef, 0xea, 0x7b, 0xeb, 0x74, 0xbd, 0x8d, 0x8f, 0x9a, 0x94, 0x24, 0xf0, 0x15, 0x58, 0x55, 0xf1,
	0x07, 0x29, 0xaa, 0x86, 0x58, 0xda, 0xd5, 0xf7, 0x56, 0x9d, 0xee, 0xe5, 0x75, 0x4f, 0xfb, 0x75,
	0xdd, 0x5b, 0x09, 0xb3, 0xbc, 0xfa, 0xf1, 0xfd, 0xe0, 0xd1, 0x9d, 0x45, 0x73, 0xa4, 0xff, 0xb7,
	0x34, 0x49, 0xe0, 0x33, 0xb0, 0x2a, 0xce, 0xa5, 0xb8, 0x28, 0xeb, 0x51, 0xb9, 0xbd, 0xbc, 0xbb,
	0xbc, 0xb7, 0x46, 0x1f, 0x82, 0xfd, 0x0b, 0x00, 0x98, 0xaa, 0x0b, 0x21, 0x83, 0xc9, 0x58, 0xc2,
	0xa7, 0x00, 0x32, 0x3f, 0xa4, 0x08, 0xf3, 0xe0, 0x6c, 0x80, 0xb9, 0x4f, 0xc9, 0x11, 0xf1, 0x0c,
	0x0d, 0xf6, 0x40, 0x77, 0x36, 0x77, 0x18, 0xe2, 0x88, 0xfa, 0x8c, 0x71, 0x74, 0x6c, 0x13, 0xcf,
	0xd0, 0xa1, 0x09, 0x3a, 0xb3, 0xc0, 0x5b, 0x42, 0xa9, 0x4f, 0xf9, 0x00, 0x7b, 0x2e, 0xf1, 0x8e,
	0x8c, 0xa5, 0xce, 0xca, 0xa7, 0x6f, 0xa6, 0xb6, 0xef, 0x83, 0x35, 0xa7, 0x16, 0x17, 0xb2, 0x62,
	0x55, 0x54, 0xd5, 0x25, 0xdc, 0x01, 0x4f, 0x9c, 0x10, 0x9d, 0xe0, 0x80, 0xb3, 0xc0, 0x0e, 0x42,
	0xc6, 0x11, 0xc5, 0x76, 0x80, 0x5d, 0x43, 0x6b, 0x06, 0xce, 0x57, 0x2e, 0x61, 0xc8, 0xf7, 0x02,
	0xe2, 0x85, 0xd8, 0x35, 0xf4, 0xbb, 0x81, 0x27, 0x60, 0x83, 0xca, 0xa4, 0xce, 0x93, 0x28, 0x17,
	0x93, 0xfb, 0x7f, 0x40, 0xb1, 0x1b, 0x7a, 0xae, 0xed, 0xa1, 0x33, 0x8e, 0xd1, 0xd4, 0xc7, 0xd0,
	0x60, 0x17, 0x6c, 0xcd, 0xe4, 0x14, 0x0f, 0xfa, 0x04, 0xd9, 0x6d, 0x79, 0x3f, 0x2c, 0x03, 0x6b,
	0xfe, 0x74, 0x69, 0x0f, 0x76, 0xbe, 0xf3, 0x06, 0xa3, 0x05, 0x76, 0xdb, 0x60, 0x73, 0xbe, 0x62,
	0xd8, 0xee, 0x37, 0x5e, 0x8d, 0xf7, 0x7c, 0x33, 0xe7, 0x7d, 0xbf, 0x88, 0x2f, 0x3a, 0xd8, 0x38,
	0xcd, 0xca, 0x2c, 0xce, 0x86, 0x59, 0xd5, 0x8a, 0xf7, 0x40, 0xf7, 0x94, 0x30, 0xe2, 0x90, 0x3e,
	0x09, 0xce, 0xda, 0x2d, 0x86, 0x1e, 0x1b, 0x60, 0x44, 0x5e, 0x93, 0xe9, 0x9d, 0x0b, 0x80, 0x41,
	0xe8, 0xf4, 0x09, 0xe2, 0x14, 0xdb, 0xcd, 0xd5, 0x5d, 0xb0, 0xf5, 0x0f, 0x40, 0xc9, 0xa9, 0x1d,
	0x60, 0x63, 0x69, 0x51, 0x49, 0xbc, 0x63, 0x4c, 0x49, 0x60, 0x2c, 0xb7, 0x52, 0x0e, 0xb9, 0xbc,
	0x31, 0xf5, 0xab, 0x1b, 0x53, 0xff, 0x7d, 0x63, 0xea, 0x9f, 0x6f, 0x4d, 0xed, 0xea, 0xd6, 0xd4,
	0x7e, 0xde, 0x9a, 0xda, 0x3b, 0x2b, 0xcd, 0xaa, 0xf3, 0x3a, 0x3e, 0x14, 0x6a, 0x64, 0xc5, 0x79,
	0x7c, 0x20, 0xce, 0xa3, 0x2c, 0xb7, 0x66, 0x9e, 0xcd, 0xc7, 0xbf, 0x0f, 0xa7, 0x9a, 0x8c, 0x65,
	0x19, 0xff, 0x37, 0xfd, 0xe6, 0x5f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x70, 0x66, 0xc2, 0x91,
	0x5b, 0x03, 0x00, 0x00,
}

func (m *SecondarySpSignDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecondarySpSignDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecondarySpSignDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksums) > 0 {
		for iNdEx := len(m.Checksums) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Checksums[iNdEx])
			copy(dAtA[i:], m.Checksums[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Checksums[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.ObjectId.Size()
		i -= size
		if _, err := m.ObjectId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GlobalGroupId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.GlobalGroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecondarySpSignDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalGroupId != 0 {
		n += 1 + sovCommon(uint64(m.GlobalGroupId))
	}
	l = m.ObjectId.Size()
	n += 1 + l + sovCommon(uint64(l))
	if len(m.Checksums) > 0 {
		for _, b := range m.Checksums {
			l = len(b)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecondarySpSignDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecondarySpSignDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecondarySpSignDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalGroupId", wireType)
			}
			m.GlobalGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, make([]byte, postIndex-iNdEx))
			copy(m.Checksums[len(m.Checksums)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
